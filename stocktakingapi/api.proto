syntax = "proto3";

package stocktakingapi;

import "google/api/annotations.proto";

service Backend {
    // Creates new or saves existing item
    rpc SaveItem(SaveItemRequest) returns (SaveItemResponse) {
      option (google.api.http) = {
        put: "/item",
        body: "*"
      };
    }

    // Returns full information for item with given ID
    rpc LoadItem(LoadItemRequest) returns (LoadItemResponse) {
      option (google.api.http) = {
        get: "/item",
      };
    }

    // Lists items tree grouped by category or owner
    rpc ListItems(ListItemsRequest) returns (ListItemsResponse) {
      option (google.api.http) = {
        get: "/items",
      };
    }

    // Disposes items with given IDs
    // Disposed item never appears in any listing,
    //  but remains accessible by ID
    rpc DisposeItems(DisposeItemsRequest) returns (DisposeItemsResponse) {
      option (google.api.http) = {
        delete: "/items",
      };
    }

    // Transfers ownership to given user for items with given IDs
    rpc TransferItems(TransferItemsRequest) returns (TransferItemsResponse) {
      option (google.api.http) = {
        patch: "/items/owner",
        body: "*"
      };
    }

    // Lists all available owners
    rpc ListOwners(ListOwnersRequest) returns (ListOwnersResponse) {
      option (google.api.http) = {
        get: "/owners",
      };
    }

    // Adds new owners and returns list of results/errors
    rpc AddOwners(AddOwnersRequest) returns (AddOwnersResponse) {
      option (google.api.http) = {
        post: "/owners",
        body: "*"
      };
    };

    // Saves new or existing owner.
    rpc SaveOwner(SaveOwnerRequest) returns (SaveOwnerResponse) {
      option (google.api.http) = {
        put: "/owner",
        body: "*"
      };
    };

    rpc LoadOwner(LoadOwnerRequest) returns (LoadOwnerResponse) {
      option (google.api.http) = {
        get: "/owner",
      };
    }

    // Deletes existing owner with given ID
    rpc DeleteOwner(DeleteOwnerRequest) returns (DeleteOwnerResponse) {
      option (google.api.http) = {
        delete: "/owner",
      };
    }

    // Attempts to authorize user in this service
    // Authorization uses only email - caller must validate email
    //  before calling this method (e.g. sign in with Google).
    // Errors:
    //  - UnknownId - no such email registered in service
    //  - AuthForbidden - email belongs to owner which cannot service itself
    rpc Authorize(AuthorizeRequest) returns (AuthorizeResponse) {
      option (google.api.http) = {
        get: "/auth/token",
      };
    };
}

message ItemSpec {
  string kind = 1; // item kind, either "equipment" or "license"
  string category = 2; // item category (e.g. "Стол")
  string place = 3; // item placement (e.g. room name or number)
  string owner_id = 4;
  double price = 5; // item price
  string description = 6; // item description
}

message SaveItemRequest {
  string id = 1; // optional, auto-generated when missed
  ItemSpec spec = 2;
}

message SaveItemResponse {
  string id = 1;
}

message LoadItemRequest {
  string id = 1;
}

message LoadItemResponse {
  string display_name = 1; // formatted combination of category and placement
  string owner_name = 2;
  ItemSpec spec = 3;
}

// Node in items tree
message ItemTreeNode {
  string id = 1;
  string display_name = 2; // formatted combination of category and placement
  string owner_name = 3; // item owner name
}

// Group of item nodes
message ItemTreeGroup {
  string name = 1;
  repeated ItemTreeNode items = 2;
}

// Item tree grouping method
enum ItemGroupingMethod {
  ByCategory = 0;
  ByOwner = 1;
}

message ListItemsRequest {
  ItemGroupingMethod grouping_method = 1;
  string kind = 2; // item kinds to find, either "" (means find all), "equipment" or "license"
}

message ListItemsResponse {
  repeated ItemTreeGroup results = 1;
}

message DisposeItemsRequest {
  repeated string ids = 1; // item ids
}

message DisposeItemsResponse {
}

message TransferItemsRequest {
  repeated string ids = 1;
  string owner_id = 2; // new owner ID
}

message TransferItemsResponse {
}

message ListOwnersRequest {
}

message ListOwnersResponse {
  message Result {
    string id = 1;
    string name = 2; // full user name (e.g. Ivan Cukic)
    string email = 3;
    bool may_login = 4;  // true if user may login this service (note: everyone is admin)
  }

  repeated Result results = 1;
}

message AddOwnersRequest {
  message Owner {
    string name = 1;
    string email = 2;
  }
  repeated Owner owners = 1;
}

message AddOwnersResponse {
  message Owner {
    string id = 1;
  }

  repeated Owner owners = 1;
}

message SaveOwnerRequest {
  string id = 1;
  string name = 2;
  string email = 3;
  bool may_login = 4; // true if user may login this service (note: everyone is admin)
}

message SaveOwnerResponse {
  string id = 1;
}

message LoadOwnerRequest {
  string id = 1;
}

message LoadOwnerResponse {
  string id = 1;
  string name = 2; // full user name (e.g. Ivan Cukic)
  string email = 3;
  bool may_login = 4;  // true if user may login this service (note: everyone is admin)
}

message DeleteOwnerRequest {
  string id = 1;
}

message DeleteOwnerResponse {
}

message AuthorizeRequest {
  string email = 1;
}

message AuthorizeResponse {
  string id = 1; // user ID
}
