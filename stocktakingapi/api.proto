syntax = "proto3";

package stocktakingapi;

service Backend {
    // Creates new or saves existing item
    rpc SaveItem(SaveItemRequest) returns (SaveItemResponse) {}

    // Returns full information for item with given ID
    rpc LoadItem(LoadItemRequest) returns (LoadItemResponse) {};

    // Lists items tree grouped by category or owner
    rpc ListItems(ListItemsRequest) returns (ListItemsResponse) {}

    // Disposes items with given IDs
    // Disposed item never appears in any listing,
    //  but remains accessible by ID
    rpc DisposeItems(DisposeItemsRequest) returns (DisposeItemsResponse) {};

    // Transfers ownership to given user for items with given IDs
    rpc TransferItems(TransferItemsRequest) returns (TransferItemsResponse) {};

    // Lists all available owners
    rpc ListOwners(ListOwnersRequest) returns (ListOwnersResponse) {}

    // Adds new owners and returns list of results/errors
    rpc AddOwners(AddOwnersRequest) returns (AddOwnersResponse) {};

    // Saves existing owner with given ID.
    rpc SaveOwner(SaveOwnerRequest) returns (SaveOwnerResponse) {};

    // Attempts to authorize user in this service
    // Authorization uses only email - caller must validate email
    //  before calling this method (e.g. sign in with Google).
    // Errors:
    //  - UnknownId - no such email registered in service
    //  - AuthForbidden - email belongs to owner which cannot service itself
    rpc Authorize(AuthorizeRequest) returns (AuthorizeResponse) {};
}

message ItemInfo {
  string category = 2; // item category (e.g. "Стол")
  string place = 3; // item placement (e.g. room name or number)
  string owner_id = 4;
  string owner_name = 5;
  double price = 6; // item price
  string description = 7; // item description
}

message SaveItemRequest {
  string id = 1; // optional, auto-generated when missed
  ItemInfo info = 2;
}

message SaveItemResponse {
  Error error = 1;
  string id = 2;
}

message LoadItemRequest {
  string id = 1;
}

message LoadItemResponse {
  Error error = 1;
  string display_name = 2; // formatted combination of category and placement
  ItemInfo info = 4;
}

// Node in items tree
message ItemTreeNode {
  string id = 1;
  string display_name = 2; // formatted combination of category and placement
  string owner_name = 3; // item owner name
}

// Group of item nodes
message ItemTreeGroup {
  repeated ItemTreeNode items = 1;
}

// Item tree grouping method
enum ItemGroupingMethod {
  ByCategory = 0;
  ByOwner = 1;
}

message ListItemsRequest {
  ItemGroupingMethod grouping_method = 1;
}

message ListItemsResponse {
  Error error = 1;
  repeated ItemTreeGroup results = 2;
}

message AddOwnersRequest {
  message Owner {
    string name = 1;
    string email = 2;
  }
  repeated Owner owners = 1;
}

message SaveOwnerRequest {
  string id = 1;
  string name = 2;
  string email = 3;
  bool may_login = 4; // true if user may login this service (note: everyone is admin)
}

message SaveOwnerResponse {
  Error error = 1;
}

message AuthorizeRequest {
  string email = 1;
}

message AuthorizeResponse {
  Error error = 1;
  string id = 2; // user ID
}

message AddOneOwnerInfo {
  Error error = 1;
  string id = 2;
}

message AddOwnersResponse {
  repeated AddOneOwnerInfo owners = 1;
}

message DisposeItemsRequest {
  repeated string ids = 1; // item ids
}

message DisposeItemsResponse {
  Error error = 1;
}

message TransferItemsRequest {
  repeated string ids = 1;
  string owner_id = 2; // new owner ID
}

message TransferItemsResponse {
  Error error = 1;
}

message ListOwnersRequest {
}

message ListOwnersResponse {
  message Result {
    string user_id = 1;
    string name = 2; // full user name (e.g. Ivan Cukic)
    bool may_login = 3;  // true if user may login this service (note: everyone is admin)
    repeated string items_count = 4; // count of items owned by this user
  }

  Error error = 1;
  repeated Result results = 2;
}

enum ErrorCode {
  InternalError = 0;
  UnknownId = 1;
  AuthForbidden = 2;
}

message Error {
  string message = 1;
  ErrorCode code = 2;
}
