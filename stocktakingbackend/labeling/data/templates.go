// Code generated by go-bindata. (@generated) DO NOT EDIT.
// sources:
// labeling/templates/print-labels.gohtml
package data

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _printLabelsGohtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x9c\x55\xcb\x6e\xdb\x3a\x10\xdd\xdf\xaf\x98\xeb\xbb\xb9\x0d\x62\xbd\xec\x3c\x2a\xcb\x6e\x8d\xb4\x40\x17\x45\xd3\x06\xe9\xa2\x4b\x5a\x1c\x5b\x44\x28\x52\xa0\x18\x3f\x22\x68\xd3\x4d\x37\xfd\x87\xfe\x42\x36\xd9\xa4\xe8\x3f\x28\x7f\x54\xc8\xb2\x25\x59\xb1\x82\xb4\xf0\x82\x8f\x33\x3c\x43\x9e\x39\x1e\x79\xff\xbe\x39\x3f\xbb\xfc\xf2\xf1\x2d\x04\x3a\xe4\xa3\x7f\xbc\x62\x00\xf0\x02\x24\x34\x9f\x00\x78\x21\x6a\x02\x7e\x40\x54\x8c\x7a\xd8\xb9\xd6\xd3\xd3\x0e\x98\x1b\x4c\x33\xcd\x71\x94\xfd\xc8\xee\x1e\xbe\x65\xb7\x0f\x5f\x1f\xbe\x43\xf6\x2b\xbb\xcd\xee\xb3\x9f\xd9\x5d\x76\x97\xdd\x7b\x66\x11\x52\x84\xc7\x7a\xb5\x9d\x03\x4c\x24\x5d\x41\xb2\x59\x00\x4c\xa5\xd0\xdd\x29\x09\x19\x5f\xb9\x30\x56\x8c\xf0\x43\x78\x87\x7c\x8e\x9a\xf9\xe4\x10\x62\x22\xe2\x6e\x8c\x8a\x4d\x07\x9b\x23\xe9\x66\x34\x38\x99\x20\xef\xfa\x52\x68\xc2\x04\xaa\x1a\xa7\x9c\xa3\x9a\x72\xb9\x70\x21\x60\x94\xa2\x18\x94\x08\x65\x71\xc4\xc9\xca\x05\x26\x38\x13\xd8\x9d\x70\xe9\x5f\xb5\x30\x6b\x5c\xea\x1a\xe9\x42\x2a\xda\x5d\x28\x12\xb9\x30\x51\x48\xae\xba\xf9\xc6\x60\x17\x5e\x03\x5b\x9c\x70\xde\x64\x7e\x1d\x22\x65\x04\x84\xd4\x10\x29\x26\xea\xf4\x0d\x59\x00\x16\x8c\xea\xc0\x85\x93\x9e\x15\x2d\x07\xb5\xfd\x90\xa8\x19\x13\x2e\x58\x40\xae\xb5\xac\x23\x6b\x29\x63\x76\x83\x2e\xd8\xfd\xfa\xa1\xb4\x9c\x3d\x21\x5a\x99\xb1\x77\xdc\xc8\x18\x20\x9b\x05\xda\x85\x7e\xcf\xd9\x05\x26\x52\x51\x54\x2e\xfc\xe7\x5b\xf9\x0f\xec\x68\x09\xb1\xe4\x8c\x3e\x91\x9a\x85\x64\x86\x7f\x94\xb6\x01\x3c\x62\x6c\xd4\xa9\x22\x3c\x6a\x21\x3c\x71\xda\x14\x3d\xdd\x97\xa8\x2c\x5e\xb4\x7b\xf3\x42\xe9\x71\xbf\x3a\xb1\x25\xb2\xfd\xb0\xa5\xf2\xcd\xaa\x9b\x07\x70\x1e\x69\x16\xb2\x1b\xa4\x30\x95\x0a\xc6\x7d\x88\x48\x84\x6a\xcd\x0e\x07\x66\xbb\x3f\x6a\xd5\xee\x87\xe1\x3e\x7d\xf2\x7f\xf5\x61\xab\xb1\x1c\xdb\xaa\x1f\xab\xe4\x71\x5e\x9e\xec\xe7\x7b\x8e\x79\x6c\xcb\x32\x8e\xf6\xf3\xda\xce\x23\x28\x22\x94\x32\x31\x73\xc1\x32\x9c\x06\xd4\xf4\x56\x11\xf1\xf7\xf6\xb2\xad\x96\xe7\x36\x80\x67\xdb\xab\x95\xd0\x69\xec\x57\xf6\x72\xf6\x25\x2a\x46\xcf\x2c\x9b\xa4\x67\x6e\xbb\xb0\x97\xd7\xae\xe8\x9b\x49\xa2\x88\x98\x21\x18\x63\x21\xa4\x26\x9a\x49\x11\xa7\xd5\x5d\x3d\xca\xe6\xe0\x73\x12\xc7\xc3\x4e\xa3\x4a\x9d\x51\x15\xc5\xc2\xd9\x6e\xd4\x5a\xae\x0e\xc4\xca\x1f\x76\x92\xc4\xf8\x74\x71\x26\x29\x7e\xbe\x78\x9f\xa6\xaf\x72\x6b\x0d\x7b\xc7\x56\xd9\xf5\xf7\xe7\xc9\xe5\xe9\x8c\x92\xc4\xb8\xc4\xa5\x36\x3e\x90\x10\xd3\x14\xfe\xdf\xae\xcf\x17\x02\x55\x9a\xbe\xf0\x26\xaa\x8c\x59\xd3\x7b\x26\x65\xf3\x1a\x6f\xb5\x4c\x12\x14\x74\xfd\x34\xcf\x2c\xde\xef\x99\xc5\xf7\xe9\x77\x00\x00\x00\xff\xff\xe0\x7c\xac\x9d\xb7\x06\x00\x00")

func printLabelsGohtmlBytes() ([]byte, error) {
	return bindataRead(
		_printLabelsGohtml,
		"print-labels.gohtml",
	)
}

func printLabelsGohtml() (*asset, error) {
	bytes, err := printLabelsGohtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "print-labels.gohtml", size: 1719, mode: os.FileMode(436), modTime: time.Unix(1556824412, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"print-labels.gohtml": printLabelsGohtml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"print-labels.gohtml": &bintree{printLabelsGohtml, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
